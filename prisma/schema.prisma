generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Course {
  BTECH
  MTECH
  BCA
  MCA
  BSC
  MSC
  MBBS
  BBA
  MBA
  PHD
  BPHARMA
  MPHARMA
  BVOC
  MVOC
}

enum Year {
  FIRST
  SECOND
  THIRD
  FOURTH
  FIFTH
}

enum Role {
  STUDENT
  ALUMNI
  ADMIN
}

enum Mode {
  ONLINE
  OFFLINE
  HYBRID
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  password          String?
  role              Role
  resetPasswordCode String?
  student           Student?
  alumni            Alumni?
  admin             Admin?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Student {
  id                 String               @id @default(cuid())
  name               String
  course             Course
  branch             String
  verifyCode         String
  isVerified         Boolean              @default(false)
  currentYear        Year
  collegeName        String
  rollNo             String
  ProfilePictureUrl  String?
  user               User                 @relation(fields: [userId], references: [id])
  userId             String               @unique
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  sessionParticipant SessionParticipant[]
}

model Alumni {
  id                            String       @id @default(cuid())
  name                          String
  phoneNumber                   String       @unique
  cgpa                          Decimal
  collegeName                   String
  currentCompany                String
  yearOfExperience              Decimal
  passoutYear                   Int
  isOpenToTakeMentorshipSession Boolean
  isVerified                    Boolean      @default(false)
  linkedinProfileUrl            String
  portfolioLink                 String?
  ProfilePictureUrl             String?
  branch                        String
  course                        Course
  currentPosition               String
  rollNo                        String
  mentorhsipSessions            Mentorship[]
  user                          User         @relation(fields: [userId], references: [id])
  userId                        String       @unique
  createdAt                     DateTime     @default(now())
  updatedAt                     DateTime     @updatedAt
}

model Admin {
  id             String   @id @default(cuid())
  CollegeName    String   @unique
  acceptedDomain String
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
  collegeLogo    String
  events         Event[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Event {
  id             String   @id @default(cuid())
  title          String
  place          String
  time           DateTime
  description    String?
  eventBannerUrl String?
  mode           Mode
  createdBy      Admin    @relation(fields: [adminId], references: [id])
  adminId        String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Mentorship {
  id           String               @id @default(cuid())
  createdBy    Alumni               @relation(fields: [alumniId], references: [id])
  alumniId     String
  meetingUrl   String
  time         String
  title        String
  participants SessionParticipant[]
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
}

model SessionParticipant {
  id        String     @id @default(uuid())
  sessionId String
  userId    String
  session   Mentorship @relation(fields: [sessionId], references: [id])
  user      Student    @relation(fields: [userId], references: [id])
  joinedAt  DateTime   @default(now())
}
